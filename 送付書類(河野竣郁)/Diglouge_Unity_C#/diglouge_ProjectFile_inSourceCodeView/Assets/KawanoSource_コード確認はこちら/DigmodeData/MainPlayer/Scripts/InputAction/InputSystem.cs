//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/KawanoSource_コード確認はこちら/DigmodeData/MainPlayer/Scripts/InputAction/InputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSystem : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem"",
    ""maps"": [
        {
            ""name"": ""InputAction"",
            ""id"": ""6403ab90-a2ee-4ed4-a2a1-8fe7a4adebea"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""1fa31bc6-712e-40d7-8998-0181c59c6ca9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Mouse"",
                    ""type"": ""Value"",
                    ""id"": ""eaaacdb5-51f1-48a5-b7f3-54df3e7c4de5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""11106c65-5449-4748-aeb5-8b0f18290cf3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""681dce3a-fcf9-417c-bef7-577f52684f58"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Action"",
                    ""type"": ""Value"",
                    ""id"": ""6910f868-5ba9-470e-a654-a2738f084725"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Hweel"",
                    ""type"": ""Value"",
                    ""id"": ""5b96d2da-31ce-497e-9760-cc510015954c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""deda9f81-a1ba-40f3-b4b1-1faa058b7e65"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlusFall"",
                    ""type"": ""Button"",
                    ""id"": ""7d25c830-b5b9-4486-8bf1-b8b83959778d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Teleport"",
                    ""type"": ""Button"",
                    ""id"": ""73c58fe5-0e0d-4e66-9509-114aadd15ae6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GetPark"",
                    ""type"": ""Button"",
                    ""id"": ""07bd8a4e-2d92-4719-b260-1de6d63f158e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WeaponChange"",
                    ""type"": ""Button"",
                    ""id"": ""4cbbebdf-0dfb-437f-b969-592d5920108c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD Key"",
                    ""id"": ""94967358-f79f-4066-9bb9-ea00c0ad1097"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d29c3792-957c-4c40-8313-41c0fae93043"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord + mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6d2a2f14-fb23-497e-bf5f-6efed523a5b5"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord + mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d0632281-27f5-47a2-a4a9-7413a812469a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord + mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8fe22096-0d78-4bab-bc12-a9a10c005d21"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord + mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e9882086-53b4-4260-963b-240e4f9d6bcd"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2"",
                    ""groups"": ""Keybord + mouse"",
                    ""action"": ""Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a7d9832b-3a20-4bc6-aa56-b6817e752e0f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord + mouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8aea0a00-0844-476e-8de5-c8596adffe07"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord + mouse"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0301d8c-a58c-4662-b588-9b4a6b1711e1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord + mouse"",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0051ccf-3bf8-4ad7-8393-d2c03bea7749"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord + mouse"",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5db878e5-29bd-45a0-8410-9566f1e85f40"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord + mouse"",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""88d7f0da-484d-47f7-aced-96016fb6af01"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord + mouse"",
                    ""action"": ""Hweel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2619f710-8976-407c-8688-80f67c35d635"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord + mouse"",
                    ""action"": ""PlusFall"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3d816349-5271-4ea2-8149-76c1c61c468a"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord + mouse"",
                    ""action"": ""Teleport"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b96f4700-8132-4da7-8c07-29617d7950b1"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord + mouse"",
                    ""action"": ""GetPark"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2bac0caa-3fec-4d37-831c-ac8c229ed12d"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord + mouse"",
                    ""action"": ""WeaponChange"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""fecc2f3c-47b2-4adb-970b-ee14c46004f5"",
            ""actions"": [
                {
                    ""name"": ""Pointer"",
                    ""type"": ""Value"",
                    ""id"": ""1e926b6e-49d9-412a-a628-82a76fccedf3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""242d825a-283c-4809-93c0-96270825d108"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pointer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""mouse"",
            ""bindingGroup"": ""mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Keybord + mouse"",
            ""bindingGroup"": ""Keybord + mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // InputAction
        m_InputAction = asset.FindActionMap("InputAction", throwIfNotFound: true);
        m_InputAction_Move = m_InputAction.FindAction("Move", throwIfNotFound: true);
        m_InputAction_Mouse = m_InputAction.FindAction("Mouse", throwIfNotFound: true);
        m_InputAction_Jump = m_InputAction.FindAction("Jump", throwIfNotFound: true);
        m_InputAction_Dash = m_InputAction.FindAction("Dash", throwIfNotFound: true);
        m_InputAction_Action = m_InputAction.FindAction("Action", throwIfNotFound: true);
        m_InputAction_Hweel = m_InputAction.FindAction("Hweel", throwIfNotFound: true);
        m_InputAction_Menu = m_InputAction.FindAction("Menu", throwIfNotFound: true);
        m_InputAction_PlusFall = m_InputAction.FindAction("PlusFall", throwIfNotFound: true);
        m_InputAction_Teleport = m_InputAction.FindAction("Teleport", throwIfNotFound: true);
        m_InputAction_GetPark = m_InputAction.FindAction("GetPark", throwIfNotFound: true);
        m_InputAction_WeaponChange = m_InputAction.FindAction("WeaponChange", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Pointer = m_UI.FindAction("Pointer", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InputAction
    private readonly InputActionMap m_InputAction;
    private IInputActionActions m_InputActionActionsCallbackInterface;
    private readonly InputAction m_InputAction_Move;
    private readonly InputAction m_InputAction_Mouse;
    private readonly InputAction m_InputAction_Jump;
    private readonly InputAction m_InputAction_Dash;
    private readonly InputAction m_InputAction_Action;
    private readonly InputAction m_InputAction_Hweel;
    private readonly InputAction m_InputAction_Menu;
    private readonly InputAction m_InputAction_PlusFall;
    private readonly InputAction m_InputAction_Teleport;
    private readonly InputAction m_InputAction_GetPark;
    private readonly InputAction m_InputAction_WeaponChange;
    public struct InputActionActions
    {
        private @InputSystem m_Wrapper;
        public InputActionActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_InputAction_Move;
        public InputAction @Mouse => m_Wrapper.m_InputAction_Mouse;
        public InputAction @Jump => m_Wrapper.m_InputAction_Jump;
        public InputAction @Dash => m_Wrapper.m_InputAction_Dash;
        public InputAction @Action => m_Wrapper.m_InputAction_Action;
        public InputAction @Hweel => m_Wrapper.m_InputAction_Hweel;
        public InputAction @Menu => m_Wrapper.m_InputAction_Menu;
        public InputAction @PlusFall => m_Wrapper.m_InputAction_PlusFall;
        public InputAction @Teleport => m_Wrapper.m_InputAction_Teleport;
        public InputAction @GetPark => m_Wrapper.m_InputAction_GetPark;
        public InputAction @WeaponChange => m_Wrapper.m_InputAction_WeaponChange;
        public InputActionMap Get() { return m_Wrapper.m_InputAction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputActionActions set) { return set.Get(); }
        public void SetCallbacks(IInputActionActions instance)
        {
            if (m_Wrapper.m_InputActionActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_InputActionActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_InputActionActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_InputActionActionsCallbackInterface.OnMove;
                @Mouse.started -= m_Wrapper.m_InputActionActionsCallbackInterface.OnMouse;
                @Mouse.performed -= m_Wrapper.m_InputActionActionsCallbackInterface.OnMouse;
                @Mouse.canceled -= m_Wrapper.m_InputActionActionsCallbackInterface.OnMouse;
                @Jump.started -= m_Wrapper.m_InputActionActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_InputActionActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_InputActionActionsCallbackInterface.OnJump;
                @Dash.started -= m_Wrapper.m_InputActionActionsCallbackInterface.OnDash;
                @Dash.performed -= m_Wrapper.m_InputActionActionsCallbackInterface.OnDash;
                @Dash.canceled -= m_Wrapper.m_InputActionActionsCallbackInterface.OnDash;
                @Action.started -= m_Wrapper.m_InputActionActionsCallbackInterface.OnAction;
                @Action.performed -= m_Wrapper.m_InputActionActionsCallbackInterface.OnAction;
                @Action.canceled -= m_Wrapper.m_InputActionActionsCallbackInterface.OnAction;
                @Hweel.started -= m_Wrapper.m_InputActionActionsCallbackInterface.OnHweel;
                @Hweel.performed -= m_Wrapper.m_InputActionActionsCallbackInterface.OnHweel;
                @Hweel.canceled -= m_Wrapper.m_InputActionActionsCallbackInterface.OnHweel;
                @Menu.started -= m_Wrapper.m_InputActionActionsCallbackInterface.OnMenu;
                @Menu.performed -= m_Wrapper.m_InputActionActionsCallbackInterface.OnMenu;
                @Menu.canceled -= m_Wrapper.m_InputActionActionsCallbackInterface.OnMenu;
                @PlusFall.started -= m_Wrapper.m_InputActionActionsCallbackInterface.OnPlusFall;
                @PlusFall.performed -= m_Wrapper.m_InputActionActionsCallbackInterface.OnPlusFall;
                @PlusFall.canceled -= m_Wrapper.m_InputActionActionsCallbackInterface.OnPlusFall;
                @Teleport.started -= m_Wrapper.m_InputActionActionsCallbackInterface.OnTeleport;
                @Teleport.performed -= m_Wrapper.m_InputActionActionsCallbackInterface.OnTeleport;
                @Teleport.canceled -= m_Wrapper.m_InputActionActionsCallbackInterface.OnTeleport;
                @GetPark.started -= m_Wrapper.m_InputActionActionsCallbackInterface.OnGetPark;
                @GetPark.performed -= m_Wrapper.m_InputActionActionsCallbackInterface.OnGetPark;
                @GetPark.canceled -= m_Wrapper.m_InputActionActionsCallbackInterface.OnGetPark;
                @WeaponChange.started -= m_Wrapper.m_InputActionActionsCallbackInterface.OnWeaponChange;
                @WeaponChange.performed -= m_Wrapper.m_InputActionActionsCallbackInterface.OnWeaponChange;
                @WeaponChange.canceled -= m_Wrapper.m_InputActionActionsCallbackInterface.OnWeaponChange;
            }
            m_Wrapper.m_InputActionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Mouse.started += instance.OnMouse;
                @Mouse.performed += instance.OnMouse;
                @Mouse.canceled += instance.OnMouse;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Dash.started += instance.OnDash;
                @Dash.performed += instance.OnDash;
                @Dash.canceled += instance.OnDash;
                @Action.started += instance.OnAction;
                @Action.performed += instance.OnAction;
                @Action.canceled += instance.OnAction;
                @Hweel.started += instance.OnHweel;
                @Hweel.performed += instance.OnHweel;
                @Hweel.canceled += instance.OnHweel;
                @Menu.started += instance.OnMenu;
                @Menu.performed += instance.OnMenu;
                @Menu.canceled += instance.OnMenu;
                @PlusFall.started += instance.OnPlusFall;
                @PlusFall.performed += instance.OnPlusFall;
                @PlusFall.canceled += instance.OnPlusFall;
                @Teleport.started += instance.OnTeleport;
                @Teleport.performed += instance.OnTeleport;
                @Teleport.canceled += instance.OnTeleport;
                @GetPark.started += instance.OnGetPark;
                @GetPark.performed += instance.OnGetPark;
                @GetPark.canceled += instance.OnGetPark;
                @WeaponChange.started += instance.OnWeaponChange;
                @WeaponChange.performed += instance.OnWeaponChange;
                @WeaponChange.canceled += instance.OnWeaponChange;
            }
        }
    }
    public InputActionActions @InputAction => new InputActionActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private IUIActions m_UIActionsCallbackInterface;
    private readonly InputAction m_UI_Pointer;
    public struct UIActions
    {
        private @InputSystem m_Wrapper;
        public UIActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pointer => m_Wrapper.m_UI_Pointer;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void SetCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterface != null)
            {
                @Pointer.started -= m_Wrapper.m_UIActionsCallbackInterface.OnPointer;
                @Pointer.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnPointer;
                @Pointer.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnPointer;
            }
            m_Wrapper.m_UIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Pointer.started += instance.OnPointer;
                @Pointer.performed += instance.OnPointer;
                @Pointer.canceled += instance.OnPointer;
            }
        }
    }
    public UIActions @UI => new UIActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_mouseSchemeIndex = -1;
    public InputControlScheme mouseScheme
    {
        get
        {
            if (m_mouseSchemeIndex == -1) m_mouseSchemeIndex = asset.FindControlSchemeIndex("mouse");
            return asset.controlSchemes[m_mouseSchemeIndex];
        }
    }
    private int m_KeybordmouseSchemeIndex = -1;
    public InputControlScheme KeybordmouseScheme
    {
        get
        {
            if (m_KeybordmouseSchemeIndex == -1) m_KeybordmouseSchemeIndex = asset.FindControlSchemeIndex("Keybord + mouse");
            return asset.controlSchemes[m_KeybordmouseSchemeIndex];
        }
    }
    public interface IInputActionActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnMouse(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnAction(InputAction.CallbackContext context);
        void OnHweel(InputAction.CallbackContext context);
        void OnMenu(InputAction.CallbackContext context);
        void OnPlusFall(InputAction.CallbackContext context);
        void OnTeleport(InputAction.CallbackContext context);
        void OnGetPark(InputAction.CallbackContext context);
        void OnWeaponChange(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnPointer(InputAction.CallbackContext context);
    }
}
